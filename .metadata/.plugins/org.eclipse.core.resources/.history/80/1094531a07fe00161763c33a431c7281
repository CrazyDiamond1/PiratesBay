package models;

import java.util.*;

import UserInteraction.UserInput;

public abstract class Island {

	private HashMap<String, Loot> buyables = new HashMap<>();
	private boolean isOwned;

	// changed from "Returns Loot" to "Returns Void"

	public void buyItem(Player player) {

		boolean buying = true;

		while (buying) {

			ArrayList<Loot> availableItems = new ArrayList<>();
			ArrayList<String> itemNames = (ArrayList<String>) buyables.keySet();

			for (String name : itemNames) {

				availableItems.add(buyables.get(name));
			}

			int choice = UserInput.userResponseToMenu(itemNames.size());

			switch (choice) {

			case 1:

				player.setGold(player.getGold() - buyables.get(itemNames.get(1)).getValue());
				buyables.remove(buyables.get(itemNames.get(1)).getName());
				player.getLoot().put(buyables.get(itemNames.get(1)).getName(), buyables.get(itemNames.get(1)));
				break;

			case 2:

				player.setGold(player.getGold() - buyables.get(itemNames.get(2)).getValue());
				buyables.remove(buyables.get(itemNames.get(2)).getName());
				player.getLoot().put(buyables.get(itemNames.get(2)).getName(), buyables.get(itemNames.get(2)));
				break;

			case 3:

				player.setGold(player.getGold() - buyables.get(itemNames.get(3)).getValue());
				buyables.remove(buyables.get(itemNames.get(3)).getName());
				player.getLoot().put(buyables.get(itemNames.get(3)).getName(), buyables.get(itemNames.get(3)));
				break;

			case 4:

				player.setGold(player.getGold() - buyables.get(itemNames.get(4)).getValue());
				buyables.remove(buyables.get(itemNames.get(4)).getName());
				player.getLoot().put(buyables.get(itemNames.get(4)).getName(), buyables.get(itemNames.get(4)));
				break;

			case 5:

				player.setGold(player.getGold() - buyables.get(itemNames.get(5)).getValue());
				buyables.remove(buyables.get(itemNames.get(5)).getName());
				player.getLoot().put(buyables.get(itemNames.get(5)).getName(), buyables.get(itemNames.get(5)));
				break;

			case 6:

				player.setGold(player.getGold() - buyables.get(itemNames.get(6)).getValue());
				buyables.remove(buyables.get(itemNames.get(6)).getName());
				player.getLoot().put(buyables.get(itemNames.get(6)).getName(), buyables.get(itemNames.get(6)));
				break;

			case 7:

				player.setGold(player.getGold() - buyables.get(itemNames.get(7)).getValue());
				buyables.remove(buyables.get(itemNames.get(7)).getName());
				player.getLoot().put(buyables.get(itemNames.get(7)).getName(), buyables.get(itemNames.get(7)));
				break;

			case 8:

				player.setGold(player.getGold() - buyables.get(itemNames.get(8)).getValue());
				buyables.remove(buyables.get(itemNames.get(8)).getName());
				player.getLoot().put(buyables.get(itemNames.get(8)).getName(), buyables.get(itemNames.get(8)));
				break;

			case 9:

				player.setGold(player.getGold() - buyables.get(itemNames.get(9)).getValue());
				buyables.remove(buyables.get(itemNames.get(9)).getName());
				player.getLoot().put(buyables.get(itemNames.get(9)).getName(), buyables.get(itemNames.get(9)));
				break;

			case 10:

				player.setGold(player.getGold() - buyables.get(itemNames.get(10)).getValue());
				buyables.remove(buyables.get(itemNames.get(10)).getName());
				player.getLoot().put(buyables.get(itemNames.get(10)).getName(), buyables.get(itemNames.get(10)));
				break;

			}
		}
	}

	// changed from "Returns int" to "Returns Void"
	public void itemToSell(Player player, Loot lootItem) {

		player.setGold(player.getGold() + lootItem.getValue());
		player.getLoot().remove(lootItem.getName());
	}

	public int beingRaided(Character player) {

		return 0;
	}

	public boolean beingAttacked() {

		return false;
	}

	public void recruit() {

	}

	public boolean isOwned() {
		return isOwned;
	}

	public void setOwned(boolean isOwned) {
		this.isOwned = isOwned;
	}

}
